import java.io.FileInputStream;
import java.security.KeyStore;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.TrustManagerFactory;

import org.springframework.http.client.reactive.ReactorClientHttpConnector;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.netty.http.client.HttpClient;
import io.netty.handler.ssl.SslContext;
import io.netty.handler.ssl.SslContextBuilder;

public class WebClientExample {

    private static final String KEYSTORE_PASSWORD = "your_keystore_password";
    private static final String TRUSTSTORE_PASSWORD = "your_truststore_password";
    private static final String KEYSTORE_PATH = "/path/to/your/keystore.jks";
    private static final String TRUSTSTORE_PATH = "/path/to/your/truststore.jks";
    private static final String URL = "https://example.com";

    public static void main(String[] args) throws Exception {
        // create SSL context
        SslContext sslContext = createSslContext();

        // create Reactor Netty HttpClient with SSL context
        HttpClient httpClient = HttpClient.create().secure(t -> t.sslContext(sslContext));

        // create ReactorClientHttpConnector with HttpClient
        ReactorClientHttpConnector connector = new ReactorClientHttpConnector(httpClient);

        // create WebClient
        WebClient webClient = WebClient.builder().clientConnector(connector).build();

        // make GET request to URL
        String response = webClient.get().uri(URL).retrieve().bodyToMono(String.class).block();

        // print response
        System.out.println(response);
    }

    private static SslContext createSslContext() throws Exception {
        // create KeyStore for client certificate
        KeyStore keyStore = KeyStore.getInstance("JKS");
        keyStore.load(new FileInputStream(KEYSTORE_PATH), KEYSTORE_PASSWORD.toCharArray());

        // create KeyManagerFactory with client certificate
        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
        keyManagerFactory.init(keyStore, KEYSTORE_PASSWORD.toCharArray());

        // create TrustStore for server certificate
        KeyStore trustStore = KeyStore.getInstance("JKS");
        trustStore.load(new FileInputStream(TRUSTSTORE_PATH), TRUSTSTORE_PASSWORD.toCharArray());

        // create TrustManagerFactory with server certificate
        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        trustManagerFactory.init(trustStore);

        // create SSL context
        SslContextBuilder sslContextBuilder = SslContextBuilder.forClient().keyManager(keyManagerFactory).trustManager(trustManagerFactory);

        return sslContextBuilder.build();
    }
}
