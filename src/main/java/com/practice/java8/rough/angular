Angular.

————— Services——————————————————

import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class ConnectorIntakeService {
  constructor() { }

  getProdCategoryOptions(): Observable<string[]> {
    // Simulate fetching data from an API or other data source
    return of(['d1', 'd2', 'd3', 'd4']);
  }

  getUserAccessOptions(): Observable<string[]> {
    // Simulate fetching data from an API or other data source
    return of(['u1', 'u2', 'u3', 'u4']);
  }

  getCustomerIdentificationOptions(): Observable<string[]> {
    // Simulate fetching data from an API or other data source
    return of(['ci1', 'ci2', 'ci3', 'ci4']);
  }

  getCustomerAddIdentificationOptions(): Observable<string[]> {
    // Simulate fetching data from an API or other data source
    return of(['ca1', 'ca2', 'ca3', 'ca4']);
  }
}






———————   Component———————————


import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ConnectorIntakeService } from './connector-intake.service';

@Component({
  selector: 'app-connector-intake',
  templateUrl: './connector-intake.component.html',
  styleUrls: ['./connector-intake.component.css']
})
export class ConnectorIntakeComponent implements OnInit {
  connectorIntakeForm: FormGroup;
  prodCategoryOptions: string[] = [];
  userAccessOptions: string[] = [];
  customerIdentificationOptions: string[] = [];
  customerAddIdentificationOptions: string[] = [];


connectorIntakeForm: FormGroup;
  prodCategoryOptions: string[] = [];
  userAccessOptions: string[] = [];
  customerIdentificationOptions: string[] = [];
  customerAddIdentificationOptions: string[] = [];
  selectedProdCategory: string[] = [];
  selectedUserAccess: string[] = [];
  selectedCustomerIdentification: string[] = [];
  selectedCustomerAddIdentification: string[] = [];

  constructor(
    private formBuilder: FormBuilder,
    private connectorIntakeService: ConnectorIntakeService
  ) { }

  ngOnInit() {
    this.connectorIntakeForm = this.formBuilder.group({
      connectorIntakeName: ['', Validators.required],
      connectorIntakeURL: ['', Validators.required],
      businessProcess: ['', Validators.required],
      prodCategory: ['', Validators.required],
      userAccess: ['', Validators.required],
      customerIdentification: ['', Validators.required],
      customerAddIdentification: ['', Validators.required],
      volume: ['', Validators.required],
      chForArchival: ['', Validators.required],
      expectedPeak: ['', Validators.required],
      contactPersonDetail: ['', Validators.required],
      srcOARID: ['', Validators.required],
      poName: ['', Validators.required],
      connectorTeam: ['', Validators.required]
    });

    this.loadDropdownOptions();
  }

  loadDropdownOptions() {
    this.connectorIntakeService.getProdCategoryOptions().subscribe(options => {
      this.prodCategoryOptions = options;
    });

    this.connectorIntakeService.getUserAccessOptions().subscribe(options => {
      this.userAccessOptions = options;
    });

    this.connectorIntakeService.getCustomerIdentificationOptions().subscribe(options => {
      this.customerIdentificationOptions = options;
    });

    this.connectorIntakeService.getCustomerAddIdentificationOptions().subscribe(options => {
      this.customerAddIdentificationOptions = options;
    });
  }


  onProdCategoryChange(selectedOptions: string[]) {
    this.selectedProdCategory = selectedOptions;
  }

  onUserAccessChange(selectedOptions: string[]) {
    this.selectedUserAccess = selectedOptions;
  }

  onCustomerIdentificationChange(selectedOptions: string[]) {
    this.selectedCustomerIdentification = selectedOptions;
  }

  onCustomerAddIdentificationChange(selectedOptions: string[]) {
    this.selectedCustomerAddIdentification = selectedOptions;
  }

  onSubmit() {
     if (this.connectorIntakeForm.valid) {
      this.connectorIntakeService.saveConnectorIntake(this.connectorIntakeForm.value);
      this.connectorIntakeForm.reset();
  }
}


———————CSS—————————————

.container {
  margin: 20px;
}

.row {
  margin-bottom: 10px;
}

.col {
  display: inline-block;
  width: 45%;
}

label {
  display: block;
  font-weight: bold;
  margin-bottom: 5px;
}

input[type="text"],
select {
  width: 100%;
}

———————————HTML————————————

<div class="container">
  <h2>Connector Intake Form</h2>
  <form [formGroup]="connectorIntakeForm" (ngSubmit)="onSubmit()">
    <div class="row">
      <div class="col">
        <label for="connectorIntakeName">Connector Intake Name</label>
        <input type="text" id="connectorIntakeName" formControlName="connectorIntakeName" required>
      </div>
      <div class="col">
        <label for="connectorIntakeURL">Connector Intake URL</label>
        <input type="text" id="connectorIntakeURL" formControlName="connectorIntakeURL" required>
      </div>
    </div>
    <div class="row">
      <div class="col">
        <label for="businessProcess">Business Process</label>
        <input type="text" id="businessProcess" formControlName="businessProcess" required>
      </div>
      <div class="col">
        <label for="prodCategory">Prod Category</label>
        <select id="prodCategory" formControlName="prodCategory" multiple (change)="onProdCategoryChange($event.target.selectedOptions)">
          <option *ngFor="let category of prodCategoryOptions" [value]="category">{{ category }}</option>
        </select>
      </div>
    </div>
    <div class="row">
      <div class="col">
        <label for="userAccess">User Access</label>
        <select id="userAccess" formControlName="userAccess" multiple (change)="onUserAccessChange($event.target.selectedOptions)">
          <option *ngFor="let access of userAccessOptions" [value]="access">{{ access }}</option>
        </select>
      </div>
      <div class="col">
        <label for="customerIdentification">Customer Identification</label>
        <select id="customerIdentification" formControlName="customerIdentification" multiple (change)="onCustomerIdentificationChange($event.target.selectedOptions)">
          <option *ngFor="let identification of customerIdentificationOptions" [value]="identification">{{ identification }}</option>
        </select>
      </div>
    </div>
    <div class="row">
      <div class="col">
        <label for="customerAddIdentification">Customer Add Identification</label>
        <select id="customerAddIdentification" formControlName="customerAddIdentification" multiple (change)="onCustomerAddIdentificationChange($event.target.selectedOptions)">
          <option *ngFor="let addIdentification of customerAddIdentificationOptions" [value]="addIdentification">{{ addIdentification }}</option>
        </select>
      </div>
      <div class="col">
        <label for="volume">Volume</label>
        <input type="text" id="volume" formControlName="volume" required>
      </div>
    </div>
    <div class="row">
      <div class="col">
        <label for="chForArchival">CH For Archival</label>
        <input type="text" id="chForArchival" formControlName="chForArchival" required>
      </div>
      <div class="col">
        <label for="expectedPeak">Expected Peak</label>
        <input type="text" id="expectedPeak" formControlName="expectedPeak" required>
      </div>
    </div>
    <div class="row">
      <div class="col">
        <label for="contactPersonDetail">Contact Person Detail</label>
        <input type="text" id="contactPersonDetail" formControlName="contactPersonDetail" required>
      </div>
      <div class="col">
        <label for="srcOARID">Src OARID</label>
        <input type="text" id="srcOARID" formControlName="srcOARID" required>
      </div>
    </div>
    <div class="row">
      <div class="col">
        <label for="poName">PO Name</label>
        <input type="text" id="poName" formControlName="poName" required>
      </div>
      <div class="col">
        <label for="connectorTeam">Connector Team</label>
        <input type="text" id="connectorTeam" formControlName="connectorTeam" required>
      </div>
    </div>
    <button type="submit">Submit</button>
  </form>
</div>
-----------------------------------




import { ComponentFixture, TestBed } from '@angular/core/testing';
import { ReactiveFormsModule } from '@angular/forms';
import { ConnectorIntakeComponent } from './connector-intake.component';
import { ConnectorIntakeService } from './connector-intake.service';

describe('ConnectorIntakeComponent', () => {
  let component: ConnectorIntakeComponent;
  let fixture: ComponentFixture<ConnectorIntakeComponent>;
  let connectorIntakeService: ConnectorIntakeService;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ConnectorIntakeComponent],
      imports: [ReactiveFormsModule],
      providers: [ConnectorIntakeService]
    }).compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(ConnectorIntakeComponent);
    component = fixture.componentInstance;
    connectorIntakeService = TestBed.inject(ConnectorIntakeService);
    fixture.detectChanges();
  });

  it('should create the component', () => {
    expect(component).toBeTruthy();
  });

  it('should load dropdown options on initialization', () => {
    spyOn(connectorIntakeService, 'getProdCategoryOptions').and.returnValue(['d1', 'd2', 'd3', 'd4']);
    spyOn(connectorIntakeService, 'getUserAccessOptions').and.returnValue(['u1', 'u2', 'u3', 'u4']);
    spyOn(connectorIntakeService, 'getCustomerIdentificationOptions').and.returnValue(['ci1', 'ci2', 'ci3', 'ci4']);
    spyOn(connectorIntakeService, 'getCustomerAddIdentificationOptions').and.returnValue(['ca1', 'ca2', 'ca3', 'ca4']);

    component.ngOnInit();

    expect(connectorIntakeService.getProdCategoryOptions).toHaveBeenCalled();
    expect(connectorIntakeService.getUserAccessOptions).toHaveBeenCalled();
    expect(connectorIntakeService.getCustomerIdentificationOptions).toHaveBeenCalled();
    expect(connectorIntakeService.getCustomerAddIdentificationOptions).toHaveBeenCalled();
    expect(component.prodCategoryOptions).toEqual(['d1', 'd2', 'd3', 'd4']);
    expect(component.userAccessOptions).toEqual(['u1', 'u2', 'u3', 'u4']);
    expect(component.customerIdentificationOptions).toEqual(['ci1', 'ci2', 'ci3', 'ci4']);
    expect(component.customerAddIdentificationOptions).toEqual(['ca1', 'ca2', 'ca3', 'ca4']);
  });

  it('should update selectedProdCategory array when prodCategory dropdown changes', () => {
    const event = {
      target: {
        selectedOptions: [{ value: 'd1' }, { value: 'd2' }]
      }
    };

    component.onProdCategoryChange(event);

    expect(component.selectedProdCategory).toEqual(['d1', 'd2']);
  });

  it('should update selectedUserAccess array when userAccess dropdown changes', () => {
    const event = {
      target: {
        selectedOptions: [{ value: 'u1' }, { value: 'u2' }]
      }
    };

    component.onUserAccessChange(event);

    expect(component.selectedUserAccess).toEqual(['u1', 'u2']);
  });

  it('should update selectedCustomerIdentification array when customerIdentification dropdown changes', () => {
    const event = {
      target: {
        selectedOptions: [{ value: 'ci1' }, { value: 'ci2' }]
      }
    };

    component.onCustomerIdentificationChange(event);

    expect(component.selectedCustomerIdentification).toEqual(['ci1', 'ci2']);
  });

  it('should update selectedCustomerAddIdentification array when customerAddIdentification dropdown changes', () => {
    const event = {
      target: {
        selectedOptions: [{ value: 'ca1' }, { value: 'ca2' }]
      }
    };

    component.onCustomerAddIdentificationChange(event);

    expect(component.selectedCustomerAddIdentification).toEqual(['ca1', 'ca2']);
  });

  it('should reset selected options and form data on form submission', () => {
    component.connectorIntakeForm.setValue({
      connectorIntakeName: 'Test Name',
      connectorIntakeURL: 'Test URL',
      businessProcess: 'Test Business Process',
      prodCategory: 'd1',
      userAccess: 'u1',
      customerIdentification: 'ci1',
      customerAddIdentification: 'ca1',
      volume: 'Test Volume',
      chForArchival: 'Test ChForArchival',
      expectedPeak: 'Test Expected Peak',
      contactPersonDetail: 'Test Contact Person Detail',
      srcOARID: 'Test SrcOARID',
      poName: 'Test Po Name',
      connectorTeam: 'Test Connector Team'
    });

    component.onSubmit();

    expect(component.connectorIntakeForm.value).toEqual({
      connectorIntakeName: '',
      connectorIntakeURL: '',
      businessProcess: '',
      prodCategory: '',
      userAccess: '',
      customerIdentification: '',
      customerAddIdentification: '',
      volume: '',
      chForArchival: '',
      expectedPeak: '',
      contactPersonDetail: '',
      srcOARID: '',
      poName: '',
      connectorTeam: ''
    });
    expect(component.selectedProdCategory).toEqual([]);
    expect(component.selectedUserAccess).toEqual([]);
    expect(component.selectedCustomerIdentification).toEqual([]);
    expect(component.selectedCustomerAddIdentification).toEqual([]);
  });
});
-----------------------------------

import { TestBed } from '@angular/core/testing';
import { HttpClientTestingModule } from '@angular/common/http/testing';
import { ConnectorIntakeService } from './connector-intake.service';

describe('ConnectorIntakeService', () => {
  let service: ConnectorIntakeService;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
    });
    service = TestBed.inject(ConnectorIntakeService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  it('should return the correct ProdCategoryOptions', (done) => {
    service.getProdCategoryOptions().subscribe(values => {
      expect(values).toEqual(['d1', 'd2', 'd3', 'd4']);
      done();
    });
  });

  it('should return the correct UserAccessOptions', (done) => {
    service.getUserAccessOptions().subscribe(values => {
      expect(values).toEqual(['u1', 'u2', 'u3', 'u4']);
      done();
    });
  });

  it('should return the correct CustomerIdentificationOptions', (done) => {
    service.getCustomerIdentificationOptions().subscribe(values => {
      expect(values).toEqual(['ci1', 'ci2', 'ci3', 'ci4']);
      done();
    });
  });

  it('should return the correct CustomerAddIdentificationOptions', (done) => {
    service.getCustomerAddIdentificationOptions().subscribe(values => {
      expect(values).toEqual(['ca1', 'ca2', 'ca3', 'ca4']);
      done();
    });
  });
});

